<!DOCTYPE html>
<html>
<head>
    <title>3D Zombie Survival Game</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body { margin: 0; overflow: hidden; background-color: lightgray; }
        canvas { width: 100%; height: 100%; }
        #controls {
            position: absolute;
            bottom: 10px;
            left: 10px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        #controls button {
            padding: 10px 20px;
            font-size: 16px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        #status {
            position: absolute;
            top: 10px;
            left: 10px;
            color: white;
            font-size: 18px;
            background-color: rgba(0, 0, 0, 0.5);
            padding: 5px;
        }
    </style>
</head>
<body>
    <div id="status">Health: 100 | Zombies: 5</div>
    <div id="controls">
        <div>
            <button id="up">Up</button>
        </div>
        <div>
            <button id="left">Left</button>
            <button id="down">Down</button>
            <button id="right">Right</button>
        </div>
        <button id="shoot">Shoot (or Tap Screen)</button>
    </div>
    <script src="https://unpkg.com/three@0.167.0/build/three.min.js"></script>
    <script>
        try {
            // Scene setup
            const scene = new THREE.Scene();
            scene.background = new THREE.Color(0x87CEEB); // Sky blue background
            const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            const renderer = new THREE.WebGLRenderer();
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);

            // Ground
            const groundGeometry = new THREE.PlaneGeometry(50, 50);
            const groundMaterial = new THREE.MeshBasicMaterial({ color: 0x228B22, side: THREE.DoubleSide });
            const ground = new THREE.Mesh(groundGeometry, groundMaterial);
            ground.rotation.x = Math.PI / 2;
            scene.add(ground);

            // Avatar (simplified humanoid)
            const avatarGroup = new THREE.Group();
            const bodyGeometry = new THREE.BoxGeometry(0.5, 1, 0.5);
            const bodyMaterial = new THREE.MeshBasicMaterial({ color: 0x00CED1 });
            const body = new THREE.Mesh(bodyGeometry, bodyMaterial);
            body.position.y = 0.5;
            avatarGroup.add(body);

            const headGeometry = new THREE.BoxGeometry(0.3, 0.3, 0.3);
            const headMaterial = new THREE.MeshBasicMaterial({ color: 0xFFDAB9 });
            const head = new THREE.Mesh(headGeometry, headMaterial);
            head.position.y = 1.0;
            avatarGroup.add(head);

            avatarGroup.position.set(0, 0.5, 0);
            scene.add(avatarGroup);

            // Zombies
            const zombies = [];
            const zombieCount = 5;
            for (let i = 0; i < zombieCount; i++) {
                const zombieGeometry = new THREE.BoxGeometry(0.5, 1, 0.5);
                const zombieMaterial = new THREE.MeshBasicMaterial({ color: 0xFF0000 });
                const zombie = new THREE.Mesh(zombieGeometry, zombieMaterial);
                zombie.position.set(
                    Math.random() * 40 - 20, // Random x position
                    0.5,
                    Math.random() * 40 - 20  // Random z position
                );
                zombies.push({ mesh: zombie, alive: true });
                scene.add(zombie);
            }

            // Projectiles
            const projectiles = [];
            function shootProjectile() {
                const projectileGeometry = new THREE.SphereGeometry(0.1, 8, 8);
                const projectileMaterial = new THREE.MeshBasicMaterial({ color: 0xFFFF00 });
                const projectile = new THREE.Mesh(projectileGeometry, projectileMaterial);
                projectile.position.copy(avatarGroup.position);
                projectile.position.y = 0.8; // Align with avatar's "hand"
                const direction = new THREE.Vector3();
                camera.getWorldDirection(direction);
                projectile.userData = { direction: direction, speed: 0.5 };
                projectiles.push(projectile);
                scene.add(projectile);
            }

            // Camera setup (third-person view)
            camera.position.set(0, 3, 5);
            camera.lookAt(avatarGroup.position);

            // Game variables
            let health = 100;
            let moveSpeed = 0.1;
            let rotationSpeed = 0.05;
            let keys = { up: false, down: false, left: false, right: false };

            // On-screen controls
            document.getElementById("up").addEventListener("touchstart", () => keys.up = true);
            document.getElementById("up").addEventListener("touchend", () => keys.up = false);
            document.getElementById("down").addEventListener("touchstart", () => keys.down = true);
            document.getElementById("down").addEventListener("touchend", () => keys.down = false);
            document.getElementById("left").addEventListener("touchstart", () => keys.left = true);
            document.getElementById("left").addEventListener("touchend", () => keys.left = false);
            document.getElementById("right").addEventListener("touchstart", () => keys.right = true);
            document.getElementById("right").addEventListener("touchend", () => keys.right = false);

            // Keyboard controls (for testing on desktop)
            document.addEventListener("keydown", (event) => {
                if (event.code === "Space") shootProjectile();
                if (event.code === "ArrowUp" || event.code === "KeyW") keys.up = true;
                if (event.code === "ArrowDown" || event.code === "KeyS") keys.down = true;
                if (event.code === "ArrowLeft" || event.code === "KeyA") keys.left = true;
                if (event.code === "ArrowRight" || event.code === "KeyD") keys.right = true;
            });
            document.addEventListener("keyup", (event) => {
                if (event.code === "ArrowUp" || event.code === "KeyW") keys.up = false;
                if (event.code === "ArrowDown" || event.code === "KeyS") keys.down = false;
                if (event.code === "ArrowLeft" || event.code === "KeyA") keys.left = false;
                if (event.code === "ArrowRight" || event.code === "KeyD") keys.right = false;
            });

            // Tap to shoot on mobile
            document.getElementById("shoot").addEventListener("touchstart", shootProjectile);
            document.addEventListener("touchstart", (event) => {
                if (event.target.tagName !== "BUTTON") shootProjectile();
            });

            // Animation loop
            function animate() {
                requestAnimationFrame(animate);

                // Avatar movement
                if (keys.up) {
                    const direction = new THREE.Vector3();
                    camera.getWorldDirection(direction);
                    direction.y = 0;
                    direction.normalize();
                    avatarGroup.position.addScaledVector(direction, moveSpeed);
                }
                if (keys.down) {
                    const direction = new THREE.Vector3();
                    camera.getWorldDirection(direction);
                    direction.y = 0;
                    direction.normalize();
                    avatarGroup.position.addScaledVector(direction, -moveSpeed);
                }
                if (keys.left) avatarGroup.rotation.y += rotationSpeed;
                if (keys.right) avatarGroup.rotation.y -= rotationSpeed;

                // Keep avatar within bounds
                avatarGroup.position.x = Math.max(-24, Math.min(24, avatarGroup.position.x));
                avatarGroup.position.z = Math.max(-24, Math.min(24, avatarGroup.position.z));

                // Update camera to follow avatar (third-person view)
                const offset = new THREE.Vector3(0, 2, 5);
                offset.applyQuaternion(avatarGroup.quaternion);
                camera.position.copy(avatarGroup.position).add(offset);
                camera.lookAt(avatarGroup.position);

                // Zombie movement
                zombies.forEach(zombie => {
                    if (!zombie.alive) return;
                    const direction = avatarGroup.position.clone().sub(zombie.mesh.position).normalize();
                    zombie.mesh.position.addScaledVector(direction, 0.05);
                });

                // Projectile movement and collision
                projectiles.forEach((projectile, index) => {
                    projectile.position.addScaledVector(projectile.userData.direction, projectile.userData.speed);
                    if (projectile.position.length() > 50) {
                        scene.remove(projectile);
                        projectiles.splice(index, 1);
                    }

                    zombies.forEach(zombie => {
                        if (!zombie.alive) return;
                        const distance = projectile.position.distanceTo(zombie.mesh.position);
                        if (distance < 0.5) {
                            zombie.alive = false;
                            scene.remove(zombie.mesh);
                            scene.remove(projectile);
                            projectiles.splice(projectiles.indexOf(projectile), 1);
                        }
                    });
                });

                // Zombie collision with avatar
                zombies.forEach(zombie => {
                    if (!zombie.alive) return;
                    const distance = avatarGroup.position.distanceTo(zombie.mesh.position);
                    if (distance < 1) {
                        health -= 0.1;
                        if (health <= 0) {
                            alert("Game Over! Refresh to restart.");
                            health = 0;
                        }
                    }
                });

                // Update status
                const aliveZombies = zombies.filter(z => z.alive).length;
                document.getElementById("status").innerText = `Health: ${Math.round(health)} | Zombies: ${aliveZombies}`;
                if (aliveZombies === 0) {
                    alert("You Win! All zombies defeated. Refresh to restart.");
                    zombies.forEach(z => z.alive = false);
                }

                renderer.render(scene, camera);
            }
            animate();

            // Handle window resize
            window.addEventListener("resize", () => {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(window.innerWidth, window.innerHeight);
            });

            document.getElementById("status").innerText = "Game running!";
        } catch (error) {
            document.getElementById("status").innerText = "Error: " + error.message;
            console.error(error);
        }
    </script>
</body>
</html>